
JavascriptExecutor is an interface in Selenium WebDriver that provides a way to execute JavaScript commands directly within the context of the browser. This can be especially useful for tasks that are not easily achieved using standard WebDriver commands.

Key Use Cases of JavascriptExecutor:
------------------------------------
Interacting with Hidden Elements: Perform actions on elements not visible to WebDriver but visible in the DOM.

Scrolling: Scroll to a specific element or to a specific position on the page.

Manipulating the DOM: Modify, create, or retrieve elements directly from the DOM.

Fetching Web Page Properties: Extract values like page title, inner text, or other properties.

Triggering Custom JavaScript Functions: Execute any custom JavaScript code within the web page.



When to Use JavascriptExecutor?
1) When standard WebDriver methods are not sufficient.
2) For complex actions or non-standard web elements like shadow DOMs or custom widgets.
3) As a fallback mechanism when interacting with web elements.
Use JavascriptExecutor sparingly to maintain test robustness and avoid over-dependence on JavaScript.



id - document.getElementById('email').value='ravilella'
name - document.getElementsByName('email')[0];
classname - document.getElementsByClassName('inputtext')[0];
tagname - document.getElementsByTagName('input')[2];
css selector - document.querySelector('#email');
xpath - document.evaluate("//input[@id='email']",document,null,XPathResult.FIRST_ORDERED_NODE_TYPE,null).singleNodeValue;

