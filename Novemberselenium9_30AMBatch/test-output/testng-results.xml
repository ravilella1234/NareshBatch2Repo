<?xml version="1.0" encoding="UTF-8"?>
<testng-results retried="6" ignored="0" total="18" passed="9" failed="2" skipped="1">
  <reporter-output>
  </reporter-output>
  <suite started-at="2024-12-28T10:31:17 IST" name="Suite" finished-at="2024-12-28T10:31:22 IST" duration-ms="4902">
    <groups>
      <group name="All">
        <method signature="RegisterTest.registerWithAllFields(java.lang.reflect.Method)[pri:2, instance:tests.RegisterTest@1e04fa0a]" name="registerWithAllFields" class="tests.RegisterTest"/>
        <method signature="RegisterTest.registerWithDuplicateFields(java.lang.reflect.Method)[pri:3, instance:tests.RegisterTest@1e04fa0a]" name="registerWithDuplicateFields" class="tests.RegisterTest"/>
        <method signature="RegisterTest.registerWithEmptyFields(java.lang.reflect.Method)[pri:4, instance:tests.RegisterTest@1e04fa0a]" name="registerWithEmptyFields" class="tests.RegisterTest"/>
        <method signature="RegisterTest.registerWithMandotoryFields(java.lang.reflect.Method)[pri:1, instance:tests.RegisterTest@1e04fa0a]" name="registerWithMandotoryFields" class="tests.RegisterTest"/>
        <method signature="LoginTest.loginWithEmptyFields(java.lang.reflect.Method)[pri:5, instance:tests.LoginTest@4d154ccd]" name="loginWithEmptyFields" class="tests.LoginTest"/>
        <method signature="LoginTest.loginWithInvalidCredientials(java.lang.reflect.Method)[pri:4, instance:tests.LoginTest@4d154ccd]" name="loginWithInvalidCredientials" class="tests.LoginTest"/>
        <method signature="LoginTest.loginWithInvalidPassword(java.lang.reflect.Method)[pri:3, instance:tests.LoginTest@4d154ccd]" name="loginWithInvalidPassword" class="tests.LoginTest"/>
        <method signature="LoginTest.loginWithInvalidUser(java.lang.reflect.Method)[pri:2, instance:tests.LoginTest@4d154ccd]" name="loginWithInvalidUser" class="tests.LoginTest"/>
        <method signature="LoginTest.loginWithValidCredientials(java.lang.reflect.Method)[pri:1, instance:tests.LoginTest@4d154ccd]" name="loginWithValidCredientials" class="tests.LoginTest"/>
        <method signature="SearchTest.searchWithEmptyProduct(java.lang.reflect.Method)[pri:3, instance:tests.SearchTest@6574a52c]" name="searchWithEmptyProduct" class="tests.SearchTest"/>
        <method signature="SearchTest.searchWithInvalidProduct(java.lang.reflect.Method)[pri:2, instance:tests.SearchTest@6574a52c]" name="searchWithInvalidProduct" class="tests.SearchTest"/>
        <method signature="SearchTest.searchWithValidProduct(java.lang.reflect.Method)[pri:1, instance:tests.SearchTest@6574a52c]" name="searchWithValidProduct" class="tests.SearchTest"/>
      </group> <!-- All -->
      <group name="Register">
        <method signature="RegisterTest.registerWithAllFields(java.lang.reflect.Method)[pri:2, instance:tests.RegisterTest@1e04fa0a]" name="registerWithAllFields" class="tests.RegisterTest"/>
        <method signature="RegisterTest.registerWithDuplicateFields(java.lang.reflect.Method)[pri:3, instance:tests.RegisterTest@1e04fa0a]" name="registerWithDuplicateFields" class="tests.RegisterTest"/>
        <method signature="RegisterTest.registerWithEmptyFields(java.lang.reflect.Method)[pri:4, instance:tests.RegisterTest@1e04fa0a]" name="registerWithEmptyFields" class="tests.RegisterTest"/>
        <method signature="RegisterTest.registerWithMandotoryFields(java.lang.reflect.Method)[pri:1, instance:tests.RegisterTest@1e04fa0a]" name="registerWithMandotoryFields" class="tests.RegisterTest"/>
      </group> <!-- Register -->
      <group name="Search">
        <method signature="SearchTest.searchWithEmptyProduct(java.lang.reflect.Method)[pri:3, instance:tests.SearchTest@6574a52c]" name="searchWithEmptyProduct" class="tests.SearchTest"/>
        <method signature="SearchTest.searchWithInvalidProduct(java.lang.reflect.Method)[pri:2, instance:tests.SearchTest@6574a52c]" name="searchWithInvalidProduct" class="tests.SearchTest"/>
        <method signature="SearchTest.searchWithValidProduct(java.lang.reflect.Method)[pri:1, instance:tests.SearchTest@6574a52c]" name="searchWithValidProduct" class="tests.SearchTest"/>
      </group> <!-- Search -->
      <group name="Regression">
        <method signature="RegisterTest.registerWithAllFields(java.lang.reflect.Method)[pri:2, instance:tests.RegisterTest@1e04fa0a]" name="registerWithAllFields" class="tests.RegisterTest"/>
        <method signature="RegisterTest.registerWithDuplicateFields(java.lang.reflect.Method)[pri:3, instance:tests.RegisterTest@1e04fa0a]" name="registerWithDuplicateFields" class="tests.RegisterTest"/>
        <method signature="RegisterTest.registerWithEmptyFields(java.lang.reflect.Method)[pri:4, instance:tests.RegisterTest@1e04fa0a]" name="registerWithEmptyFields" class="tests.RegisterTest"/>
        <method signature="RegisterTest.registerWithMandotoryFields(java.lang.reflect.Method)[pri:1, instance:tests.RegisterTest@1e04fa0a]" name="registerWithMandotoryFields" class="tests.RegisterTest"/>
        <method signature="LoginTest.loginWithEmptyFields(java.lang.reflect.Method)[pri:5, instance:tests.LoginTest@4d154ccd]" name="loginWithEmptyFields" class="tests.LoginTest"/>
        <method signature="LoginTest.loginWithInvalidCredientials(java.lang.reflect.Method)[pri:4, instance:tests.LoginTest@4d154ccd]" name="loginWithInvalidCredientials" class="tests.LoginTest"/>
        <method signature="LoginTest.loginWithInvalidPassword(java.lang.reflect.Method)[pri:3, instance:tests.LoginTest@4d154ccd]" name="loginWithInvalidPassword" class="tests.LoginTest"/>
        <method signature="LoginTest.loginWithInvalidUser(java.lang.reflect.Method)[pri:2, instance:tests.LoginTest@4d154ccd]" name="loginWithInvalidUser" class="tests.LoginTest"/>
        <method signature="LoginTest.loginWithValidCredientials(java.lang.reflect.Method)[pri:1, instance:tests.LoginTest@4d154ccd]" name="loginWithValidCredientials" class="tests.LoginTest"/>
        <method signature="SearchTest.searchWithEmptyProduct(java.lang.reflect.Method)[pri:3, instance:tests.SearchTest@6574a52c]" name="searchWithEmptyProduct" class="tests.SearchTest"/>
        <method signature="SearchTest.searchWithInvalidProduct(java.lang.reflect.Method)[pri:2, instance:tests.SearchTest@6574a52c]" name="searchWithInvalidProduct" class="tests.SearchTest"/>
        <method signature="SearchTest.searchWithValidProduct(java.lang.reflect.Method)[pri:1, instance:tests.SearchTest@6574a52c]" name="searchWithValidProduct" class="tests.SearchTest"/>
      </group> <!-- Regression -->
      <group name="smoke">
        <method signature="RegisterTest.registerWithAllFields(java.lang.reflect.Method)[pri:2, instance:tests.RegisterTest@1e04fa0a]" name="registerWithAllFields" class="tests.RegisterTest"/>
        <method signature="RegisterTest.registerWithMandotoryFields(java.lang.reflect.Method)[pri:1, instance:tests.RegisterTest@1e04fa0a]" name="registerWithMandotoryFields" class="tests.RegisterTest"/>
        <method signature="LoginTest.loginWithValidCredientials(java.lang.reflect.Method)[pri:1, instance:tests.LoginTest@4d154ccd]" name="loginWithValidCredientials" class="tests.LoginTest"/>
        <method signature="SearchTest.searchWithValidProduct(java.lang.reflect.Method)[pri:1, instance:tests.SearchTest@6574a52c]" name="searchWithValidProduct" class="tests.SearchTest"/>
      </group> <!-- smoke -->
      <group name="sanity">
        <method signature="RegisterTest.registerWithDuplicateFields(java.lang.reflect.Method)[pri:3, instance:tests.RegisterTest@1e04fa0a]" name="registerWithDuplicateFields" class="tests.RegisterTest"/>
        <method signature="LoginTest.loginWithInvalidUser(java.lang.reflect.Method)[pri:2, instance:tests.LoginTest@4d154ccd]" name="loginWithInvalidUser" class="tests.LoginTest"/>
        <method signature="LoginTest.loginWithValidCredientials(java.lang.reflect.Method)[pri:1, instance:tests.LoginTest@4d154ccd]" name="loginWithValidCredientials" class="tests.LoginTest"/>
        <method signature="SearchTest.searchWithValidProduct(java.lang.reflect.Method)[pri:1, instance:tests.SearchTest@6574a52c]" name="searchWithValidProduct" class="tests.SearchTest"/>
      </group> <!-- sanity -->
      <group name="Login">
        <method signature="LoginTest.loginWithEmptyFields(java.lang.reflect.Method)[pri:5, instance:tests.LoginTest@4d154ccd]" name="loginWithEmptyFields" class="tests.LoginTest"/>
        <method signature="LoginTest.loginWithInvalidCredientials(java.lang.reflect.Method)[pri:4, instance:tests.LoginTest@4d154ccd]" name="loginWithInvalidCredientials" class="tests.LoginTest"/>
        <method signature="LoginTest.loginWithInvalidPassword(java.lang.reflect.Method)[pri:3, instance:tests.LoginTest@4d154ccd]" name="loginWithInvalidPassword" class="tests.LoginTest"/>
        <method signature="LoginTest.loginWithInvalidUser(java.lang.reflect.Method)[pri:2, instance:tests.LoginTest@4d154ccd]" name="loginWithInvalidUser" class="tests.LoginTest"/>
        <method signature="LoginTest.loginWithValidCredientials(java.lang.reflect.Method)[pri:1, instance:tests.LoginTest@4d154ccd]" name="loginWithValidCredientials" class="tests.LoginTest"/>
      </group> <!-- Login -->
    </groups>
    <test started-at="2024-12-28T10:31:17 IST" name="RegisterTest" finished-at="2024-12-28T10:31:22 IST" duration-ms="4481">
      <class name="tests.RegisterTest">
        <test-method signature="registerWithMandotoryFields(java.lang.reflect.Method)[pri:1, instance:tests.RegisterTest@1e04fa0a]" started-at="2024-12-28T10:31:18 IST" name="registerWithMandotoryFields" finished-at="2024-12-28T10:31:18 IST" duration-ms="31" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.RegisterTest.registerWithMandotoryFields(java.lang.reflect.Method)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- registerWithMandotoryFields -->
        <test-method retried="true" signature="registerWithAllFields(java.lang.reflect.Method)[pri:2, instance:tests.RegisterTest@1e04fa0a]" started-at="2024-12-28T10:31:18 IST" name="registerWithAllFields" finished-at="2024-12-28T10:31:18 IST" duration-ms="15" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.RegisterTest.registerWithAllFields(java.lang.reflect.Method)]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[null]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: null
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.fail(Assert.java:106)
at tests.RegisterTest.registerWithAllFields(RegisterTest.java:24)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- registerWithAllFields -->
        <test-method retried="true" signature="registerWithAllFields(java.lang.reflect.Method)[pri:2, instance:tests.RegisterTest@1e04fa0a]" started-at="2024-12-28T10:31:18 IST" name="registerWithAllFields" finished-at="2024-12-28T10:31:18 IST" duration-ms="33" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.RegisterTest.registerWithAllFields(java.lang.reflect.Method)]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[null]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: null
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.fail(Assert.java:106)
at tests.RegisterTest.registerWithAllFields(RegisterTest.java:24)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- registerWithAllFields -->
        <test-method retried="true" signature="registerWithAllFields(java.lang.reflect.Method)[pri:2, instance:tests.RegisterTest@1e04fa0a]" started-at="2024-12-28T10:31:18 IST" name="registerWithAllFields" finished-at="2024-12-28T10:31:18 IST" duration-ms="6" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.RegisterTest.registerWithAllFields(java.lang.reflect.Method)]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[null]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: null
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.fail(Assert.java:106)
at tests.RegisterTest.registerWithAllFields(RegisterTest.java:24)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- registerWithAllFields -->
        <test-method signature="registerWithAllFields(java.lang.reflect.Method)[pri:2, instance:tests.RegisterTest@1e04fa0a]" started-at="2024-12-28T10:31:18 IST" name="registerWithAllFields" finished-at="2024-12-28T10:31:18 IST" duration-ms="13" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.RegisterTest.registerWithAllFields(java.lang.reflect.Method)]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[null]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: null
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.fail(Assert.java:106)
at tests.RegisterTest.registerWithAllFields(RegisterTest.java:24)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- registerWithAllFields -->
        <test-method retried="true" signature="registerWithDuplicateFields(java.lang.reflect.Method)[pri:3, instance:tests.RegisterTest@1e04fa0a]" started-at="2024-12-28T10:31:18 IST" name="registerWithDuplicateFields" finished-at="2024-12-28T10:31:19 IST" duration-ms="1083" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.RegisterTest.registerWithDuplicateFields(java.lang.reflect.Method) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <exception class="org.testng.internal.thread.ThreadTimeoutException">
            <message>
              <![CDATA[Method tests.RegisterTest.registerWithDuplicateFields() didn't finish within the time-out 1000]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.testng.internal.thread.ThreadTimeoutException: Method tests.RegisterTest.registerWithDuplicateFields() didn't finish within the time-out 1000
at org.testng.internal.MethodInvocationHelper.invokeWithTimeoutWithNewExecutor(MethodInvocationHelper.java:384)
at org.testng.internal.MethodInvocationHelper.invokeWithTimeout(MethodInvocationHelper.java:283)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:604)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- org.testng.internal.thread.ThreadTimeoutException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- registerWithDuplicateFields -->
        <test-method retried="true" signature="registerWithDuplicateFields(java.lang.reflect.Method)[pri:3, instance:tests.RegisterTest@1e04fa0a]" started-at="2024-12-28T10:31:19 IST" name="registerWithDuplicateFields" finished-at="2024-12-28T10:31:20 IST" duration-ms="1010" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.RegisterTest.registerWithDuplicateFields(java.lang.reflect.Method) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <exception class="org.testng.internal.thread.ThreadTimeoutException">
            <message>
              <![CDATA[Method tests.RegisterTest.registerWithDuplicateFields() didn't finish within the time-out 1000]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.testng.internal.thread.ThreadTimeoutException: Method tests.RegisterTest.registerWithDuplicateFields() didn't finish within the time-out 1000
at org.testng.internal.MethodInvocationHelper.invokeWithTimeoutWithNewExecutor(MethodInvocationHelper.java:384)
at org.testng.internal.MethodInvocationHelper.invokeWithTimeout(MethodInvocationHelper.java:283)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:604)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- org.testng.internal.thread.ThreadTimeoutException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- registerWithDuplicateFields -->
        <test-method retried="true" signature="registerWithDuplicateFields(java.lang.reflect.Method)[pri:3, instance:tests.RegisterTest@1e04fa0a]" started-at="2024-12-28T10:31:20 IST" name="registerWithDuplicateFields" finished-at="2024-12-28T10:31:21 IST" duration-ms="1016" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.RegisterTest.registerWithDuplicateFields(java.lang.reflect.Method) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <exception class="org.testng.internal.thread.ThreadTimeoutException">
            <message>
              <![CDATA[Method tests.RegisterTest.registerWithDuplicateFields() didn't finish within the time-out 1000]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.testng.internal.thread.ThreadTimeoutException: Method tests.RegisterTest.registerWithDuplicateFields() didn't finish within the time-out 1000
at org.testng.internal.MethodInvocationHelper.invokeWithTimeoutWithNewExecutor(MethodInvocationHelper.java:384)
at org.testng.internal.MethodInvocationHelper.invokeWithTimeout(MethodInvocationHelper.java:283)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:604)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- org.testng.internal.thread.ThreadTimeoutException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- registerWithDuplicateFields -->
        <test-method signature="registerWithDuplicateFields(java.lang.reflect.Method)[pri:3, instance:tests.RegisterTest@1e04fa0a]" started-at="2024-12-28T10:31:21 IST" name="registerWithDuplicateFields" finished-at="2024-12-28T10:31:22 IST" duration-ms="1016" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.RegisterTest.registerWithDuplicateFields(java.lang.reflect.Method) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <exception class="org.testng.internal.thread.ThreadTimeoutException">
            <message>
              <![CDATA[Method tests.RegisterTest.registerWithDuplicateFields() didn't finish within the time-out 1000]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.testng.internal.thread.ThreadTimeoutException: Method tests.RegisterTest.registerWithDuplicateFields() didn't finish within the time-out 1000
at org.testng.internal.MethodInvocationHelper.invokeWithTimeoutWithNewExecutor(MethodInvocationHelper.java:384)
at org.testng.internal.MethodInvocationHelper.invokeWithTimeout(MethodInvocationHelper.java:283)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:604)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- org.testng.internal.thread.ThreadTimeoutException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- registerWithDuplicateFields -->
        <test-method signature="registerWithEmptyFields(java.lang.reflect.Method)[pri:4, instance:tests.RegisterTest@1e04fa0a]" started-at="2024-12-28T10:31:22 IST" name="registerWithEmptyFields" finished-at="2024-12-28T10:31:22 IST" depends-on-methods="tests.RegisterTest.registerWithAllFields" duration-ms="0" status="SKIP">
          <exception class="java.lang.Throwable">
            <message>
              <![CDATA[Method RegisterTest.registerWithEmptyFields(java.lang.reflect.Method)[pri:4, instance:tests.RegisterTest@1e04fa0a] depends on not successfully finished methods]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.Throwable: Method RegisterTest.registerWithEmptyFields(java.lang.reflect.Method)[pri:4, instance:tests.RegisterTest@1e04fa0a] depends on not successfully finished methods
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:102)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.Throwable -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- registerWithEmptyFields -->
      </class> <!-- tests.RegisterTest -->
    </test> <!-- RegisterTest -->
    <test started-at="2024-12-28T10:31:22 IST" name="Login" finished-at="2024-12-28T10:31:22 IST" duration-ms="63">
      <class name="tests.LoginTest">
        <test-method signature="loginWithValidCredientials(java.lang.reflect.Method)[pri:1, instance:tests.LoginTest@4d154ccd]" started-at="2024-12-28T10:31:22 IST" name="loginWithValidCredientials" finished-at="2024-12-28T10:31:22 IST" duration-ms="5" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.LoginTest.loginWithValidCredientials(java.lang.reflect.Method)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginWithValidCredientials -->
        <test-method signature="loginWithInvalidUser(java.lang.reflect.Method)[pri:2, instance:tests.LoginTest@4d154ccd]" started-at="2024-12-28T10:31:22 IST" name="loginWithInvalidUser" finished-at="2024-12-28T10:31:22 IST" duration-ms="4" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.LoginTest.loginWithInvalidUser(java.lang.reflect.Method)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginWithInvalidUser -->
        <test-method signature="loginWithInvalidPassword(java.lang.reflect.Method)[pri:3, instance:tests.LoginTest@4d154ccd]" started-at="2024-12-28T10:31:22 IST" name="loginWithInvalidPassword" finished-at="2024-12-28T10:31:22 IST" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.LoginTest.loginWithInvalidPassword(java.lang.reflect.Method)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginWithInvalidPassword -->
        <test-method signature="loginWithInvalidCredientials(java.lang.reflect.Method)[pri:4, instance:tests.LoginTest@4d154ccd]" started-at="2024-12-28T10:31:22 IST" name="loginWithInvalidCredientials" finished-at="2024-12-28T10:31:22 IST" duration-ms="4" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.LoginTest.loginWithInvalidCredientials(java.lang.reflect.Method)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginWithInvalidCredientials -->
        <test-method signature="loginWithEmptyFields(java.lang.reflect.Method)[pri:5, instance:tests.LoginTest@4d154ccd]" started-at="2024-12-28T10:31:22 IST" name="loginWithEmptyFields" finished-at="2024-12-28T10:31:22 IST" duration-ms="7" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.LoginTest.loginWithEmptyFields(java.lang.reflect.Method)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginWithEmptyFields -->
      </class> <!-- tests.LoginTest -->
    </test> <!-- Login -->
    <test started-at="2024-12-28T10:31:22 IST" name="SearchTest" finished-at="2024-12-28T10:31:22 IST" duration-ms="44">
      <class name="tests.SearchTest">
        <test-method signature="searchWithValidProduct(java.lang.reflect.Method)[pri:1, instance:tests.SearchTest@6574a52c]" started-at="2024-12-28T10:31:22 IST" name="searchWithValidProduct" finished-at="2024-12-28T10:31:22 IST" duration-ms="13" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.SearchTest.searchWithValidProduct(java.lang.reflect.Method)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- searchWithValidProduct -->
        <test-method signature="searchWithInvalidProduct(java.lang.reflect.Method)[pri:2, instance:tests.SearchTest@6574a52c]" started-at="2024-12-28T10:31:22 IST" name="searchWithInvalidProduct" finished-at="2024-12-28T10:31:22 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.SearchTest.searchWithInvalidProduct(java.lang.reflect.Method)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- searchWithInvalidProduct -->
        <test-method signature="searchWithEmptyProduct(java.lang.reflect.Method)[pri:3, instance:tests.SearchTest@6574a52c]" started-at="2024-12-28T10:31:22 IST" name="searchWithEmptyProduct" finished-at="2024-12-28T10:31:22 IST" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.SearchTest.searchWithEmptyProduct(java.lang.reflect.Method)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- searchWithEmptyProduct -->
      </class> <!-- tests.SearchTest -->
    </test> <!-- SearchTest -->
  </suite> <!-- Suite -->
</testng-results>
