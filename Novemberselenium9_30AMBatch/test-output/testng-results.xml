<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="4" passed="2" failed="1" skipped="1">
  <reporter-output>
  </reporter-output>
  <suite started-at="2024-12-24T10:34:41 IST" name="Suite" finished-at="2024-12-24T10:34:42 IST" duration-ms="190">
    <groups>
      <group name="Regression">
        <method signature="RegisterTest1.registerWithEmptyFields(java.lang.reflect.Method)[pri:0, instance:tests.RegisterTest1@1e04fa0a]" name="registerWithEmptyFields" class="tests.RegisterTest1"/>
      </group> <!-- Regression -->
      <group name="smoke">
        <method signature="RegisterTest1.registerWithDuplicateFields(java.lang.reflect.Method)[pri:0, instance:tests.RegisterTest1@1e04fa0a]" name="registerWithDuplicateFields" class="tests.RegisterTest1"/>
        <method signature="RegisterTest1.registerWithMandotoryFields(java.lang.reflect.Method)[pri:0, instance:tests.RegisterTest1@1e04fa0a]" name="registerWithMandotoryFields" class="tests.RegisterTest1"/>
      </group> <!-- smoke -->
      <group name="sanity">
        <method signature="RegisterTest1.registerWithAllFields(java.lang.reflect.Method)[pri:0, instance:tests.RegisterTest1@1e04fa0a]" name="registerWithAllFields" class="tests.RegisterTest1"/>
      </group> <!-- sanity -->
    </groups>
    <test started-at="2024-12-24T10:34:41 IST" name="Test" finished-at="2024-12-24T10:34:42 IST" duration-ms="190">
      <class name="tests.RegisterTest1">
        <test-method signature="registerWithDuplicateFields(java.lang.reflect.Method)[pri:0, instance:tests.RegisterTest1@1e04fa0a]" started-at="2024-12-24T10:34:42 IST" name="registerWithDuplicateFields" finished-at="2024-12-24T10:34:42 IST" duration-ms="30" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.RegisterTest1.registerWithDuplicateFields(java.lang.reflect.Method)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- registerWithDuplicateFields -->
        <test-method signature="registerWithMandotoryFields(java.lang.reflect.Method)[pri:0, instance:tests.RegisterTest1@1e04fa0a]" started-at="2024-12-24T10:34:42 IST" name="registerWithMandotoryFields" finished-at="2024-12-24T10:34:42 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.RegisterTest1.registerWithMandotoryFields(java.lang.reflect.Method)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- registerWithMandotoryFields -->
        <test-method signature="registerWithAllFields(java.lang.reflect.Method)[pri:0, instance:tests.RegisterTest1@1e04fa0a]" started-at="2024-12-24T10:34:42 IST" name="registerWithAllFields" depends-on-groups="smoke" finished-at="2024-12-24T10:34:42 IST" duration-ms="3" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.RegisterTest1.registerWithAllFields(java.lang.reflect.Method)]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.ArithmeticException">
            <message>
              <![CDATA[/ by zero]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.ArithmeticException: / by zero
at tests.RegisterTest1.registerWithAllFields(RegisterTest1.java:21)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.ArithmeticException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- registerWithAllFields -->
        <test-method signature="registerWithEmptyFields(java.lang.reflect.Method)[pri:0, instance:tests.RegisterTest1@1e04fa0a]" started-at="2024-12-24T10:34:42 IST" name="registerWithEmptyFields" depends-on-groups="sanity" finished-at="2024-12-24T10:34:42 IST" duration-ms="0" status="SKIP">
          <exception class="java.lang.Throwable">
            <message>
              <![CDATA[Method RegisterTest1.registerWithEmptyFields(java.lang.reflect.Method)[pri:0, instance:tests.RegisterTest1@1e04fa0a] depends on not successfully finished methods in group "sanity"]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.Throwable: Method RegisterTest1.registerWithEmptyFields(java.lang.reflect.Method)[pri:0, instance:tests.RegisterTest1@1e04fa0a] depends on not successfully finished methods in group "sanity"
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:102)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.Throwable -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- registerWithEmptyFields -->
      </class> <!-- tests.RegisterTest1 -->
    </test> <!-- Test -->
  </suite> <!-- Suite -->
</testng-results>
